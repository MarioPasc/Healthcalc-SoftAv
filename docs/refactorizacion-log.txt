=========================================================
Registro de la Refactorización al Código de la Aplicación
=========================================================

#######################################################
1. Sustiución del tipo 'char' para Género por un 'ENUM'
#######################################################

- Bad Smell: El problema que resuelve este refactoring es principalmente Type Tests. 
Este olor se manifiesta cuando hay operaciones que dependen de un tipo de datos específico, 
como en este caso, los caracteres que representan género ('m' o 'w'), que requieren 
verificaciones de tipo repetitivas y propensas a errores en el código.

- Tipo de Refactoring: El refactoring aplicado es Replace Type Code with Class.

- Categoría del Refactoring: Este cambio es un Attribute Refactoring ya que modifica la forma 
en que se maneja un atributo de la entidad, transformando un tipo de dato primitivo en una 
clase con mayor funcionalidad.

- Descripción: Se ha reemplazado el uso de caracteres para representar el género ('m', 'w') 
por una Enumeración Gender con dos estados posibles: FEMALE y MALE. Este cambio elimina la 
necesidad de realizar comprobaciones de tipo y comparaciones de caracteres a lo largo del código, 
centralizando la lógica de género en una única estructura de datos y permitiendo el uso de 
características orientadas a objetos para manejar diferencias basadas en el género de manera 
más robusta.

- Registro de cambios detallado:
    - Creación del enum Gender.
    - Cambio en la implementación específica HealthCalcImpl:
        1. char gender -> Gender gender
        2. Cambio del uso de "if" a usar "switch" ya que ahora tenemos un caso "default":
            1. if (gender == 'm') -> case MALE:
            2. else if (gender == 'w') -> case FEMALE:
            3. default -> case DEFAULT: throw new IllegalArgumentException
    - Cambio en el Controlador del Modelo Vista-Controlador: Se ha cambiado para que trabaje
    con el enumerado uma.Gender:
        1. Se ha importado uma.Gender
        2. 'char' -> Gender 
        3. 'm' -> Gender.MALE
        4. 'w' -> Gender.FEMALE
        5. Se ha creado un nuevo mensaje de error para el caso de que el usuario no seleccione un
        género e intente calcular el BMR o peso ideal. 
    - Cambio en la interfaz HealthCalc: char gender -> Gender gender
    - Cambio en las pruebas unitarias: Se ha usado una herramienta de reemplazado de texto
    para cambiar las siguientes instancias:
        1. 'm' -> Gender.MALE
        2. 'w' -> Gender.FEMALE
        3. 'x' -> null

- Resumen de los cambios:
+--------------------------------------+------------------------+-------------------------+
| Clase afectada por refactorización   | Líneas de código       |     Refactorización     |
|                                      | afectadas              |   (Manual/Automático)   |
+--------------------------------------+------------------------+-------------------------+
| Enum Gender                          | 5 líneas               | Manual                  |
| HealthCalc                           | 2 líneas               | Automático              |
| HealthCalcImpl                       | 31 líneas              | Manual                  |
| Modelo Vista-Controlador             | 3 líneas               | Manual                  |
| Pruebas unitarias                    | 8 líneas               | Automático              |
+--------------------------------------+------------------------+-------------------------+



###################################################################################################################
2. Sustitución de los atributos individuales 'height, weight, age y gender' por una clase que los contenga, Person
###################################################################################################################

- Bad Smell: El problema que resuelve este refactoring es Data Clumbs. 
Los mismos datos (como peso, altura, edad, género) se pasan juntos en varias funciones o clases, agruparlos en una 
sola clase (Person) reduce la repetición y mejora la cohesión.

- Tipo de Refactoring: El refactoring aplicado aquí sería Encapsulate Data, donde se agrupan los datos que comúnmente
van juntos, y Move Method, donde los métodos que dependen de los datos de la persona se trasladan dentro de la clase Person.

- Categoría del Refactoring: Este cambio es principalmente un Class Refactoring, ya que reestructura cómo se organizan y se 
manejan los datos y comportamientos relacionados con las personas dentro del sistema.

- Descripción: Se ha creado la clase Person para incluir los campos de peso, altura, edad, y género, que anteriormente 
estaban dispersos. La clase ahora encapsula todos los datos relevantes, centralizando la lógica relacionada con las personas.

- Registro de cambios detallado:
    1. Creación de la interfaz Person.
    2. Creación de la clase PersonaEspecifica, que implementa la interfaz Person.
        - Implementación específica a los métodos de la interfaz Person.
        - Implementación de un constructor con los parámetros de entrada weight, height, age y gender para el BMR.
        - Implementación de un constructor con los parámetros de entrada height y gender para el peso ideal.
    3. Cambios en la interfaz HealthCalc: Se han cambiado los parámetros de entrada weight, height, age y gender por Person person.
    4. Cambios en la clase específica HealthCalcImpl:
        - Se ha eliminado el control de parámetros de entrada erróneos en los métodos basalMetabolicRate e idealWeight.
        - Se han cambiado los parámetros de entrada weight, height, age y gender por Person person.
    5. Cambios en los test unitarios: Debido a que ahora la comporbación de parámetros se realiza en la clase PersonaEspecifica,
    que implementa la interfaz Person, se han mantenido el mismo número de test, pero se ha esperado una excepción de Person. 
    10. Cambios en el Modelo Vista Controlador: Ahora peso ideal y BMR crean un objeto tipo Person para realizar los cálculos. 

- Resumen de los cambios:
+--------------------------------------+------------------------+-------------------------+
| Clase afectada por refactorización   | Líneas de código       |     Refactorización     |
|                                      | afectadas              |   (Manual/Automático)   |
+--------------------------------------+------------------------+-------------------------+
| Interfaz Person                      | 31 líneas              | Manual                  |
| Clase PersonaEspecifica              | 77 líneas              | Manual                  |
| Interfaz HealthCalc                  | 2 líneas               | Automático              |
| Clase HealthCalcImpl                 | 12 líneas              | Manual                  |
| Test unitarios                       | 74 líneas              | Manual                  |
| Modelo Vista-Controlador             | 7 líneas               | Manual                  |
+--------------------------------------+------------------------+-------------------------+


######################################################################
3. Creación de las interfaces CardiovascularMetrics y MetabolicMetrics
######################################################################

- Bad Smell: El principal problema aquí sería Large/God Class, donde una clase tiene demasiadas responsabilidades, abarcando múltiples 
aspectos de la funcionalidad del sistema que deberían estar separados en módulos más cohesivos y especializados.

- Tipo de Refactoring: El refactoring aplicado sería Extract Interface. Este refactoring implica la creación de interfaces específicas 
que definen contratos claros para los servicios relacionados con las métricas cardiovasculares y metabólicas. 

- Categoría del Refactoring: Este cambio es un Class Refactoring ya que se extráen interfaces concretas de una interfaz más grande. 

- Descripción: Se han creado las interfaces CardiovascularMetrics y MetabolicMetrics para separar claramente las funcionalidades de 
cálculo del peso ideal y la tasa metabólica basal, respectivamente. 

- Registro de cambios detallados:
    1. Creación de la interfaz CardiovascularMetrics.
    2. Creación de la interface MetabolicMetrics.
    3. Modificación de la clase HealthCalcImpl para implementar las interfaces CardiovascularMetrics y MetabolicMetrics:
        1. Se ha cambiado el tipo de dato a devolver y el nombre del método idealWeight, así como el tipo de variable en el que se almacena
        el peso ideal.
        2. Se ha cambiado el tipo de dato a devolver y el nombre del método basalMetabolicRate, así como el tipo de variable en el que 
        se almacena la tasa metabólica basal.
    4. Modificación  de los test unitarios: Se han cambiado los test unitarios para que los métodos que hacían uso de 'idealWeight' ahora 
    hagan uso de 'getIdealBodyWeight'.
    6. Modificación en el Modelo Vista-Controlador:
        1. En el Controlador, se ha cambiado el tipo de dato para almacenar el BMR. 
        2. En el controlador, se ha cambiado el tipo de dato para almacenar el peso ideal en el Controlador y el 
        nombre del método 'idealWeight' por 'getIdealBodyWeight'.
        3. En la Vista, se ha cambiado el tipo de dato de entrada de 'float' a 'double' en setBMRResults setIdealWResults.
        4. En la Vista, se ha añadio un "DecimalFormat". Esto es porque los tipos double, al tener más precisión, podrían mostrar por 
        pantalla demasiados decimales para algunos cálculos. Al hacer que el formato sea más corto, se evita que se muestre 
        demasiados decimales.
    7. Eliminada la clase HealthCalc por "Remove Lazy Class". 

- Resumen de los cambios:
+--------------------------------------+------------------------+-------------------------+
| Clase afectada por refactorización   | Líneas de código       |     Refactorización     |
|                                      | afectadas              |   (Manual/Automático)   |
+--------------------------------------+------------------------+-------------------------+
| Interfaz CardiovascularMetrics       | 5 líneas               | Manual                  |
| Interfaz MetabolicMetrics            | 5 líneas               | Manual                  |
| Clase HealthCalcImpl                 | 7 líneas               | Manual/Automático       |
| Test unitarios                       | 2 líneas               | Automático              |
| Modelo Vista-Controlador: Vista      | 2 líneas               | Manual                  |
| Modelo Vista-Controlador: Controlador| 11 líneas              | Manual/Automático       |
| HealthCalc                           | 36 líneas (eliminada)  | Automático              |
+--------------------------------------+------------------------+-------------------------+